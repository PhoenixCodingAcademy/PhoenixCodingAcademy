data:
  contact: |
    **Emails**

    * [Admin](mailto:pca@willo.org)
    * [Membership](mailto:pca@willo.org)
    * [Web](mailto:pca@willo.org)
    * [Info](mailto:pca@willo.org)

  notebooks:
    # SEE:   https://stackoverflow.com/questions/48481290/a-simple-way-to-view-ipython-notebook
    # baseUrl: https://colab.research.google.com/github/PhoenixCodingAcademy/PhoenixCodingAcademy/blob/main/projects/notebooks
    baseUrl1: https://github.com/PhoenixCodingAcademy/PhoenixCodingAcademy/blob/main/projects/notebooks
    baseUrl: https://nbviewer.org/github/PhoenixCodingAcademy/PhoenixCodingAcademy/blob/main/projects/notebooks

content:
  subjects: |
    The subjects below are mainly suggested topics that can be discussed in the club  depending on popular interest.
    Some will be [emphasized](pages/EmphasizedSubjects.md) since they will help the participants work with the general projects, but most are optional.



subjects:
- id: tools
  title: Tools
  short: Popular software applications

- id: powershell
  title: PowerShell
  short: Microsoft's newest replacement of DOS; competitor with Bash
  parents: tools

- id: git
  title: Git Version Control
  short: Use Git to help contribute to the club, and build collaborative project.
  parents: tools

- id: environments
  title: Frameworks and Runtime Environments
  short: General overview of operating systems with emphasis on Windows and Linux

- id: installers
  title: Methods to Install Software
  short: Methods to Install Software
  parents: environments
  description: |
    Much of the interesting software can be installed on your laptop without requiring admin permissions, if you know how.
    You are not bypassing the security of the laptop, but rather using a secondary approach, called the portable installation.
    Once installed, the software cannot perform elevated operations, but it can run its intended functions just for you.

    The general strategy is to create a root subfolder for you; e.g. `C:\sofia` (called the "app folder") and then add all your portable software there.

    An alternative strategy is to install [scoop](/subjects/scoop) or [chocolatey](/subjects/chocolatey) or both
    to make installing software very easy. Winget requires admin permissions and so we'll ignore it. Some decisions facts:
    * Chocolatey tends to require more admin permissions and PowerShell
    * Scoop installs more to user folders.

  links:
  - url: https://dev.to/davidkou/install-anything-without-admin-rights-4p0j
    text: Install anything without Admin rights
  - url: https://dev.to/bowmanjd/chocolatey-vs-scoop-package-managers-for-windows-2kik
    text: "Chocolatey vs. Scoop: Package Managers for Windows"
  - url: https://www.onmsft.com/feature/scoop-or-chocolatey-which-windows-10-package-manager-should-you-use/
    text: Scoop or Chocolatey? Which Windows 10 package manager should you use?

- id: chocolatey
  title: Chocolatey
  short: Chocolatey package manager and installer
  parents: installers

- id: scoop
  title: Scoop
  short: Scoop package manager and installer
  parents: installers

- id: cygwin
  title: Cygwin
  short: The Cygwin unix-like environment that runs on Windows.
  parents: installers

- id: mingw
  title: MinGW
  short: The MinGW unix-like environment that runs on Windows.
  parents: installers
  description: |
  links:
  - url: https://stackoverflow.com/questions/771756/what-is-the-difference-between-cygwin-and-mingw
    text: What is the difference between Cygwin and MinGW?

- id: msys
  title: MSYS2
  short: Minimalist GNU for Windows
  parents: installers
  description: |
    "MinGW: A native Windows port of the GNU Compiler Collection (GCC), with freely distributable import libraries and header files for building native Windows applications; includes extensions to the MSVC runtime to support C99 functionality. All of MinGW's software will execute on the 64bit Windows platforms."
  links:
  - url: https://www.msys2.org/
    text: Software Distribution and Building Platform for Windows




#================================================================================
#  OPERATING SYSTEMS
#================================================================================
- id: os
  title: Operating Systems
  short: General overview of operating systems with emphasis on Windows and Linux

- id: qemu
  title: Quick Emulator (QEMU)
  short: Machine Emulator
  parents: os

- id: linux
  title: Linux
  short: Linux is a free version competitor of Microsoft Windows and Apple iOS. Most web sites run on Linux today.
  parents: os

- id: wsl
  title: Windows Subsystem for Linux
  short: If you have a machine with Windows on it, this is the fastest way to get up an running with Linux
  description: |
    This section assumes that you have permissions to install WSL.
    Your school might not allow it on their machines (e.g a laptop you are borrowing) since it can allow you to bypass
    tbe Windows Firewall in clever ways. But for you own machines at home, or your own personal device, WSL can get you started
    in Linux very quickly.
  parents: linux installers
  courses:
  - id: wsl_install
    title: How to install WSL2 on your laptop.
    links:
    - https://learn.microsoft.com/en-us/windows/wsl/install
    - url: https://ubuntu.com/wsl
      text: The Ubuntu version of WSL
    - url: https://www.howtogeek.com/744328/how-to-install-the-windows-subsystem-for-linux-on-windows-11/
      text: How to Install the Windows Subsystem for Linux on Windows 11
  links:
  - url: https://learn.microsoft.com/en-us/windows/wsl/
    text: Windows Subsystem for Linux Documentation
  - url: https://www.bleepingcomputer.com/news/microsoft/windows-subsystem-for-linux-2-bypasses-the-windows-10-firewall/
    text: WSL 2 bypasses the Windows firewall




#================================================================================
#  PROGRAMMING
#================================================================================
- id: programming
  title: Programming Languages
  short: There are over 1000 programming language in use today and you can use most of them for free.
  description: |
    The [TIOBE](https://www.tiobe.com/tiobe-index/) index will show which programming languages are the most popular in the world.

    Some languages that might be fun for the class to explore:
    * Assembly Language (x86)
    * APL
    * Erlang
    * Forth
    * Haskell
    * Julia
    * Prolog
    * Rust
  links:
  - url: https://www.tiobe.com/tiobe-index/
    text: TIOBE Index
  - url: https://madnight.github.io/githut/#/pull_requests/2023/2
    text: GitHut 2.0 - language stats from Github.
  - url: https://statisticstimes.com/tech/top-computer-languages.php
    text: Statistics Times - Top Computer Languages
  - url: https://github.com/topics
    text: Github topics, organized and searchable
  - url: https://pypl.github.io/PYPL.html
    text: PYPL PopularitY of Programming Language - created by analyzing how often language tutorials are searched on Google.
  - url: https://careerkarma.com/blog/best-programming-languages-for-engineers/
    text: Most Popular Programming Languages for Engineers
  - url: https://dataoverhaulers.com/programming-languages-in-english/
    text: Are All Programming Languages In English?

- id: replit
  title: Repl.it
  short: |
    Use this site to try out over 50 different programming languages without having to install any locally.
    Just type your code in a press Run.
    It's a quick way to perform experiments and satisfy your immediate curiosity.
  parents: programming
  links:
  - https://replit.com
  - url: https://dotnet.microsoft.com/en-us/languages
    text: A similar Microsoft site for .NET languages.
  - url: https://blog.replit.com/nix
    text: How we went from supporting 50 languages to all of them
  tags: web

- id: yaml
  title: Yet Another Markup Language
  short: This is a human readable JSON text format. This web site encodes all its subjects, courses, and assignments in YAML.
  parents: programming
  description: |
    YAML (short for Yet Another Markup Language) is often known as human-readable JSON. Anything you can do with JSON, you can do with
  links:
  - https://en.wikipedia.org/wiki/YAML
  - url: https://yaml.org/
    text: Official YAML Web Site
  - url: https://www.redhat.com/en/topics/automation/what-is-yaml
    text: What is YAML?

- id: python
  title: Python Programming Language
  short: Python is perhaps the most taught language in school these days. This site is built with it. There is very little you cannot do with Python.
  parents: programming

- id: rust
  title: Rust Programming
  short: You know, cargo
  parents: programming

- id: dotnet
  title: .NET Runtime Environment
  short: |
    The .NET runtime environment has greatly jumped in popularity since Microsoft made the environment open source in 2016.
    Practically any programming language can be written to compile to .NET. Your Windows 10 laptop most likely has
  parents: programming
  links:
  - url: https://aristeksystems.com/blog/top-3-dot-net-framework-trends-2021/#what-id-dot-net
    text: Top 3 .Net Framework Trends to Follow in 2021
  - url: https://dotnet.microsoft.com/en-us/learn/dotnet/what-is-dotnet
    text: What is .NET?
  - url: https://learn.microsoft.com/en-us/dotnet/core/introduction
    text: What is .NET? Introduction and overview
  - url: https://en.wikipedia.org/wiki/Category:.NET_programming_languages
    text: List of .NET Programming Languages

- id: csharp
  title: C# Programming
  short: C# is the most popular .NET programming language. The demand for C# programmers has now exceeded Java programmers.
  parents: dotnet

- id: lisp
  title: LISP Programming
  short:
  parents: programming



#================================================================================
#  WEB
#================================================================================
- id: web
  title: Web Development
  short: All things HTML, CSS, and JavaScript; plus dynamic site generation and hosting.

- id: bootstrap
  title: Bootstrap CSS and JS web site styles
  links:
  - url: https://getbootstrap.com
    text: Build fast, responsive sites with Bootstrap
  - url: https://blog.appseed.us/flask-template-bootstrap-open-source-starters/
    text: Flask Bootstrap Templates - Open-Source Starters



- id: flask
  title: Flask
  short: This python web engine/framework is what this site is running on. Build dynamic web sites quickly with Flask.
  parents: web
  prerequisites: InstallPython


- id: this_web
  title: Contributing to this school web site
  short: Learn how to help evolve this site by creating subjects, courses, assignments, and exams.
  parents: flask yaml git
  prerequisites: InstallPython




#================================================================================
#  MATHEMATICS
#================================================================================
- id: math
  title: Mathematics
  short: |
    Mathematics is very interesting and fun if you do it right.
    All university science majors and engineering professions require it as the language.
    You'll get lots of math in your school, but this club concentrates on using computers to understand and solve problems.
    This subject is less about how to solve math problems and more about what types of problems are there that can make a
    business profitable, and what types of tools exist that can solve them.

- id: mathapps
  title: Mathematical Software and Applications
  short: A list of popular math tools.
  parents: math

- id: octave
  title: GNU Octave
  short: Scientific Programming Language
  parents: mathapps
  links:
  - url: https://octave.org/

- id: sagemath
  title: SageMath
  parents: mathapps
  short: |
    System for Algebra and Geometry Experimentation is a free application that can solve problems as well as Mathematica.
    No only can it give you the number to a solution, it can give your function that solves a Calculus problem.
  links:
  - https://www.sagemath.org/
  - https://en.wikipedia.org/wiki/SageMath

- id: BLAS
  title: Basic Linear Algebra Subprograms
  parents: mathapps
  short: |
    BLAS is used for high-speed computations and A.I. We'll see where this course goes in depth,
    but a 30-minute understanding of this tool is important for future engineers.
  links:
  - https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms

- id: matlab
  title: MATLAB
  parents: mathapps
  short: |
    MATLAB is a programming platform designed specifically for engineers and scientists to analyze and design systems and products.
    The heart of MATLAB is the MATLAB language, which is a matrix-based language that allows for the most natural expression
    of computational mathematics1. MATLAB allows for matrix manipulations, plotting of functions and data, implementation of
    algorithms, creation of user interfaces, and interfacing with programs written in other languages.
    It is widely used by engineers and scientists worldwide for a range of applications, including deep learning and machine learning,
    signal processing and communications, image and video processing, control systems, test and measurement, computational finance,
    and computational biology
  links:
  - https://en.wikipedia.org/wiki/MATLAB
  - https://www.mathworks.com/products/matlab.html
  - url: https://www.mathworks.com/
    text: MATLAB for Artificial Intelligence

- id: statistics
  title: Probability and Statistics
  parents: math
  description: |
    With all the great tools today (Python, R, Mathematica, SageMath) prob and stats are much easier to use.
  links:
  - url: https://seeing-theory.brown.edu/index.html
    text: A visual introduction to probability and statistics
    short: I found this site well done.

- id: fem
  title: Finite Element Methods
  short: |
    Engineers and scientists use this mathematical method to break down complicated physical systems into many (but finite)
    smaller simpler parts (or elements) where each element acts the same way.
  parents: math
  links:
  - url: https://en.wikipedia.org/wiki/Finite_element_method
    text: Main Wiki Page
  - url: https://en.wikipedia.org/wiki/List_of_finite_element_software_packages
    text: List of software packages
  - url: http://sfepy.org/doc-devel/documentation.html
    text: Simple Finite Element Python
    short: Still complex, but the general overview is interesting.



#================================================================================
#  DATA SCIENCE
#================================================================================
- id: datascience
  title: Data Science
  short: |
    All science degrees at the university will require basic fluency in data acquisition and generating charts.
    Excel was a popular tool of the past, but Jupyter Notebooks are the current hot thing.
    Basic understanding of statistics and proving one's hypothesis is paramount.
  links:
  - url: https://www.analyticsvidhya.com/blog-archive/

- id: datasources
  title: Data Sources
  short: A list of places where you can find data sources online. Great for data science projects.
  parents: datascience
  description: |
    Here is a list of places where you can get free data; typically tablular in the form of CSV (comma-separated values),
    TSV (tab-separated values), or Excel files.

  links:
  - url: https://data.gov/
    text: The Home of the U.S. Government's Open Data
    short: 250K searchable data sets publicly available.
  - url:
    text:
    short: |
      Kaggle is the world's largest data science and machine learning community.
      We provide powerful tools and resources like customizable Jupyter notebooks, public datasets and machine learning competitions
      to help you achieve your data science goals.
  - url: https://datasetsearch.research.google.com/
    text: Google Data Search Engine
    short: Unify tens of thousands of different repositories for datasets and make that data discoverable for everyone.
  - url: https://data.worldbank.org/
    text: World Bank Open Data
    short: Free and open access to global development data. The World Bank funds initiatives in underdeveloped nations on a regular basis, then collects statistics to track their success.
  - url: https://github.com/awesomedata/awesome-public-datasets
    text: Awesome Public Datasets
    short: This is a list of topic-centric public data sources in high quality. They are collected and tidied from blogs, answers, and user responses. Most of the data sets listed below are free, however, some are not.
  - url: https://academictorrents.com/
    text: Making over 127.15TB of research data available
    short: A website dedicated to the distribution of data sets from scholarly studies. It contains a plethora of intriguing data sets.
  - url: https://archive.ics.uci.edu/datasets
    text: UC Irvine Machine Learning Repository
    short: |
      The UCI Machine Learning Repository is a collection of databases, domain theories, and data generators that are used by the machine learning
      community for the empirical analysis of machine learning algorithms.

      The archive was created as an ftp archive in 1987 by UCI PhD student David Aha. Since that time,
      it has been widely used by students, educators, and researchers all over the world as a primary source of
      machine learning datasets.
  - url: http://yann.lecun.com/exdb/mnist/
    text: THE MNIST DATABASE of handwritten digits
    short: |
      The MNIST database of handwritten digits, available from this page, has a training set of 60,000 examples,
      and a test set of 10,000 examples. It is a subset of a larger set available from NIST.
      The digits have been size-normalized and centered in a fixed-size image.
      It is a good database for people who want to try learning techniques and pattern recognition methods on real-world data
      while spending minimal efforts on preprocessing and formatting.
  - url: http://yann.lecun.com/exdb/mnist/
    text: The Chars74K dataset - Character Recognition in Natural Images
    short: |
      Character recognition is a classic pattern recognition problem for which researchers have worked since the early days of computer vision.
      With today's omnipresence of cameras, the applications of automatic character recognition are broader than ever.
      For Latin script, this is largely considered a solved problem in constrained situations,
      such as images of scanned documents containing common character fonts and uniform background.
      However, images obtained with popular cameras and hand held devices still pose a formidable challenge for character recognition.
      The challenging aspects of this problem are evident in this dataset.
  - url: http://web.mit.edu/emeyers/www/face_databases.html
    text: Face Databases
  - url: https://www.kdnuggets.com/datasets/index.html
    text: KD Nuggets
    short: Datasets for Data Science, Machine Learning, AI & Analytics
  - url: http://datacatalogs.org/
    text: A Comprehensive List of Open Data Portals from Around the World
    short: |
      DataPortals.org is the most comprehensive list of open data portals in the world.
      It is curated by a group of leading open data experts from around the world - including representatives from local,
      regional and national governments, international organisations such as the World Bank, and numerous NGOs.
  - url: https://data.sagepub.com/
    text: Sage Data
    short: |
      Billions of multidisciplinary, global statistics for research and instruction
  - url: https://www.analyticsvidhya.com/blog/2018/03/comprehensive-collection-deep-learning-datasets/
    text: 25 Open Datasets for Deep Learning Every Data Scientist Must Work With

- id: python_datascience
  title: Python Data Science
  short: Python is a complete data science toolkit.
  parents: datascience

- id: numpy
  title: Numpy
  parents: math python_datascience
  short: |
    Numpy is the python equivalent to BLAS and MATLAB.

- id: jupyter
  title: Jupyter Notebooks
  short: Fundamentals of reproducible research and data science. Jupyter is a free substitute for R, Knitr, PDF generation, and Mathematica.
  parents: python_datascience
  prerequisites: InstallPython

- id: pandas
  short: Pandas is the Python version of R language, and used by most Data Scientists today.
  parents: python_datascience
  prerequisites: InstallPython

- id: matplotlib
  short: This library is the Python version of R's GGPlot library.
  parents: python_datascience
  prerequisites: InstallPython
  courses:

- id: R
  short: R is a complete data science toolkit, and pre-dates Python.
  parents: datascience
  description: |
    Although Python is the #1 language in the world, R is now (2023) #16. It was and still is a great language for data science
    and statistics, but Python has since copied its functionality and made it simpler. Still, some data science / machine learning
    courses online use R instead of Python.

  links:
  - url: https://en.wikipedia.org/wiki/R_(programming_language)
  - url: https://www.coursera.org/learn/data-scientists-tools
    text: Coursera (Johns Hopkins University) - The Data Scientist’s Toolbox
  - url: https://www.coursera.org/search?query=data%20science
    text: Coursera Data Science Online Classes

- id: RStudio
  short: R is a complete data science toolkit, and pre-dates Python
  parents: R
  links:
  - https://www.rstudio.com/categories/rstudio-ide/
  - https://en.wikipedia.org/wiki/RStudio
  description: |
      RStudio is an integrated development environment (IDE) for the R programming language, which is used for statistical computing and graphics.
      It is available in two formats: RStudio Desktop, which is a regular desktop application, and RStudio Server, which runs on a remote server
      and allows access to RStudio using a web browser.
      RStudio includes a console, syntax-highlighting editor that supports direct code execution, and tools for plotting, history,
      debugging, and workspace management.
      It is available in open source and commercial editions and runs on the desktop (Windows, Mac, and Linux).
      RStudio is widely used by data scientists and statisticians for developing statistical software and data analysis.





#================================================================================
#  EDITORS and IDEs
#================================================================================
- id: editors
  title: Editors and IDEs
  short: Text editors and Interactive Development Environements

- id: vscode
  title: Microsoft Visual Code (not Visual Studio)
  parents: editors
  short: Text editors and Interactive Development Environements




#================================================================================
#  DOCUMENTATION
#================================================================================
- id: documentation
  title: Documentation and Technical Writing
  short: Tools for creating documentation.

- id: markdown
  parents: documentation
  title: Markdown Language for Documentation
  short: Use a text editor to easily create web page content without dealing with HTML.
  description: |
    Much of the content on this web site is encoded in Markdown, including this description paragraph here.
    All documentation on Github and Wikipedia is down with Markdown.
    See the [Markdown Page](/pages/Markdown.md) for a demonstration of what can be done with Markdown.

- id: mermaid
  parents: documentation
  title: Create diagrams with just text.
  short: Include diagrams in your Markdown files with Mermaid
  links:
  - url: https://mermaid.js.org/intro/
    text: Mermaid Home
  - url: https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/
    text: Include diagrams in your Markdown files with Mermaid





#================================================================================
#  ENGINEERING
#================================================================================
- id: eng
  title: Engineering
  short: What are different engineering professions and articles pertaining to it?
  description: |
    I've once heard that an "Engineer" is a "Scientist" plus an "Economist".
    $$Engineer = Scientist + Economist$$
    As a scientist, you find solutions to physical problems.
    As an economist, you optimize the solutions to minimize cost.

  links:
  - url: https://en.wikipedia.org/wiki/List_of_engineering_branches
    text: Wikipedia - List of engineering branches
    short: Some blogs worth reading to improve your system design.
  - url: https://www.nu.edu/blog/types-of-engineering/
    text: "Types of Engineering: What Are They? Everything Explained"
    short: What is an engineer? Types of engineering.
  - url: https://blog.prepscholar.com/different-types-of-engineering
    text: "50+ Types of Engineering Degrees: Which Is Right for You?"
    short: What types of engineering can you choose from? And how do they differ from one another?
  - url: https://www.forbes.com/sites/andrewdepietro/2023/01/31/highest-paying-engineering-jobs-of-2023/?sh=2eb31f21768e
    text: "Highest Paying Engineering Jobs Of 2023"
    short: Petroleum, Computer Hardware, and Aerospace being the top 3.
  - url: https://github.com/JohnCrickett/SystemDesign/blob/main/engineering-blogs/README.md
    text: Tech Company Engineering Blogs
    short: Some blogs worth reading to improve your system design.

#================================================================================
#  SOFTWARE ENGINEERING
#================================================================================
- id: softeng
  title: Software Engineering
  short: What is software engineering? What are the major topics of it? How can you use it to help build this site?
  parents: eng

- id: softeng_specification
  title: Writing a Software Product Specification (SPS)
  short: What are the most important parts of an SPS?
  parents: softeng




#================================================================================
#  COMPUTER SCIENCE
#================================================================================

- id: theory
  title: Theory of Computation
  short: How simple can we make a computer that can do everything, given enough time?

- id: turingmachines
  title: Turing Machines
  short: What is a Turing Machine, and why do we care?
  parents: theory



#================================================================================
#  ARTIFICIAL INTELLIGENCE
#================================================================================

- id: ai
  title: Artificial Intelligence
  short: What are the methods of artificial intelligence and machine learning?



#================================================================================
#  HISTORY
#================================================================================

- id: history
  title: Computer History
  short: Always intellectual to know how computer technology was invented and how it evolved.

- id: cpus
  title: Central Processing Units
  short: Always intellectual to know how computer technology was invented and how it evolved.
  parents: history

- id: computers
  title: Computers
  short: History of computers
  parents: history
  description: |
    ## Timeline
    Some important (author's choice) relevant dates in the history of computers and software.

    * **2nd century BC** - [Antikythera mechanism](https://en.wikipedia.org/wiki/Antikythera_mechanism) - first indication of
    and analog computer.
    * **1642** - Blaise Pascal (France) invented the [mechanical calculator](https://en.wikipedia.org/wiki/Pascal%27s_calculator).
    * **1672** - Gottfried Leibniz (Germany) started designing a machine which multiplied, the [Stepped Reckoner](https://en.wikipedia.org/wiki/Stepped_reckoner).
    * **1685** - Gottfried Leibniz (Germany) 4-function calculator.
    * **1822** - Charles Babbage builds first prototype of the [decimal difference engine](https://en.wikipedia.org/wiki/Difference_engine) for tabulating polynomials.
    * **1832** - Semen Korsakov (Russia) proposed the usage of punch cards to store information.
    * **1839** - Jacquard Loom (England) required 24,000 punched cards to create an intricate woven pattern.
    * **1847** - British Mathematician George Boole developed binary algebra (Boolean algebra).
    * **1886** - Herman Hollerith (USA) proposed punch cards (or [Hollerith Cards](https://en.wikipedia.org/wiki/Punched_card)) for
      tabulating data.
    * **1890** - IBM founded to tabulate the 1980 Census Data.
    * **1990** - First [flip-flop circuit](https://en.wikipedia.org/wiki/Flip-flop_(electronics)) design in England; later to become the main circuit in RAM.
    * **1930** - Vannevar Bush built a partly electronic differential analyzer capable of solving differential equations.
    * **1931** - Kurt Gödel (Austria) publishes Gödel Theorem about the incompleteness of mathematics.
    * **1936** - Alan Turing (Cambridge University, England), published papers on theoretical computation; Turing Incompleteness Theorem.
    * **1937** - George Stibitz (Bell Labs, New York City) builds first binary computer.
    * **1937** - Claude E. Shannon published a paper on the implementation of symbolic logic using relays as his MIT Master's thesis.
    * **1938** - Konrad Zuse (Berlin), completed the 'Z1', the first mechanical binary programmable computer.
    * **1939** - William Hewlett and David Packard (Palo Alto, California) established the Hewlett-Packard Company in Packard's garage.
    * **1943** - Mark 1 Colossus (UK) computer to crack German codes. It had 2400 vacuum tubes and could process 25,000 characters a second
    * **1944** - Harvard [Mark I](https://en.wikipedia.org/wiki/Harvard_Mark_I) (US) computer by IBM.
    * **1945** - [Vannevar Bush](https://en.wikipedia.org/wiki/Vannevar_Bush) developed memex theory, a hypertext systems, eventually leading to the creation of the World Wide Web.
    * **1945** - [John Von Neumann](https://en.wikipedia.org/wiki/John_von_Neumann) designs the Von Neumann architecture, which the Intel chips are based on.
    * **1947** - Kathleen Booth (University of London) invents first assembly language.
    * **1947** - William B. Shockley (Bell Labs, USA) invents the transistor.
    * **1949** - Cambridge University executed the first stored program on the EDSAC computer.
    * **1950** - Alan Turing published a paper describing the potential development of human and computer intelligence and communication - the Turing Test.
    * **1951** - First computer generated music
    * **1951** - US builds EDVAC (electronic discrete variable computer) to load programs from [paper tape](https://en.wikipedia.org/wiki/Punched_tape).
    * **1951** - Grace Murray Hopper invents A-0, the first high-level compiler.
    * **1955** - John Backus (IBM) invents [FORTRAN](https://en.wikipedia.org/wiki/Fortran)
    * **1956** - Dartmouth College (New Hampshire) holds first conference on AI.
    * **1957** - IBM first dot matrix printer.
    * **1958** - John McCarthy (MIT) invents [LISP](https://en.wikipedia.org/wiki/Lisp_(programming_language)) language.
    * **1958** - Jack Kilby (Texas Instruments) invents the first integrated circuit.
    * **1959** - **Second Generation computers** based on transistors.
    * **1959** - Robert Noyce (Fairchild Semiconductor) develops silicon integrated circuit.
    * **1960** - [ALGOL](https://en.wikipedia.org/wiki/ALGOL) programming language, first to use code blocks; e.g. BEGIN and END
    * **1961** - Kenneth Iverson (IBM) invents APL programming language.
    * **1962** - England (University of Manchester) build most powerful computer, the ATLAS, having modern architectural concepts:
     spooling, interrupts, pipelining, interleaved memory, virtual memory and paging.
    * **1963** - Douglas Engelbart conceived of the Mouse, later popularized by Apple Lisa.
    * **1963** - J. C. R. Licklider (IBM) kicks off [Project MAC](https://en.wikipedia.org/wiki/MIT_Computer_Science_and_Artificial_Intelligence_Laboratory#Project_MAC),
      DARPA funded, to start networking computers. First Internet.
    * **1964** - **Third-generation computers** based on integrated circuits
    * **1964** - IBM releases [PL/1](https://en.wikipedia.org/wiki/PL/I) programming language.
    * **1964** - IBM releases IBM System/360, first standard computer.
    * **1965** - Digital Equipment Corporation (DEC) releases the first minicomputer: [PDP-8](https://en.wikipedia.org/wiki/PDP-8)
    * **1965** - Moore's Law, by Gordon Moore.
    * **1965** - Fuzzy logic designed by Lotfi Zadeh (University of California, Berkeley)
    * **1965** - Dartmouth College releases BASIC (Beginners All Purpose Symbolic Instruction Code) programming language
    * **1965** - Donald Davies invent "packet switching", used by ARPANET, the precursor of the Internet.
    * **1967** - Niklaus Wirth created Pascal programming language; to become the academic language. Python took that title around 2010.
    * **1968** - Robert Noyce founded Intel
    * **1968** - HP creates first programmable calculator - the [HP 9100A](https://en.wikipedia.org/wiki/Hewlett-Packard_9100A).
    * **1968** - Douglas Engelbart discusses GUI and hypertext documents.
    * **1969-11-29** - First computer-to-computer login occurred between Stanford and UCLA
    * **1969** - Start of UNIX OS
    * **1969** - [RS-232](https://en.wikipedia.org/wiki/RS-232) interface created
    * **1969** - Data General sells 8000 [Nova Computers](https://en.wikipedia.org/wiki/Data_General_Nova) - the first 16-bit minicomputer.
    * **1970** - [FORTH](https://en.wikipedia.org/wiki/Forth_(programming_language)) programming language.
    * **1971** - First email sent.
    * **1971-11-15** - Intel develops the first commercially available 4-bit [4004](https://en.wikipedia.org/wiki/Intel_4004) microprocessor.
    * **1971** - 8-inch floppy disk.
    * **1972** - [Pong](https://en.wikipedia.org/wiki/Pong) game released.
    * **1972** - **Fourth-generation computers** based on LSI (Large Scale Integration) circuits.
    * **1972** - Dennis Ritchie (Bell Labs) develops C language - to introduce "structured programming" paradigm.
    * **1972** - HP creates first hand-held calculator - renders slide rules obsolete.
    * **1972-04-01** - Intel [8008](https://en.wikipedia.org/wiki/Intel_8008) microprocessor.
    * **1972** - ARPANET makes first international connection. Becomes the Internet.
    * **1973** - The first personal computer - the [SCAMP](https://en.wikipedia.org/wiki/Portable_computer#SCAMP) to run [APL](https://en.wikipedia.org/wiki/APL_(programming_language)).
    * **1973** - [Clifford Cocks](https://en.wikipedia.org/wiki/Clifford_Cocks) (UK) mathematician invents prime number factorization cryptography to become the first public key encryption.
    * **1973** - Vint Cerf and Robert Kahn develop [TCP/IP](https://en.wikipedia.org/wiki/Internet_protocol_suite).
    * **1973** - [Prolog](https://en.wikipedia.org/wiki/Prolog) programming language invented in France.
    * **1973** - Don Lancaster displayed alphanumeric information on an ordinary television set.
    * **1973** - [Ethernet](https://en.wikipedia.org/wiki/Ethernet) invented.
    * **1974-04-01** - [Intel 8080](https://en.wikipedia.org/wiki/Intel_8080) 8-bit microprocessor released.
    * **1974** - Motorola [MC6800](https://en.wikipedia.org/wiki/Motorola_6800) 8-bit microprocessor released
    * **1975** - Italy [Olivetti P6060](https://en.wikipedia.org/wiki/Olivetti_P6060) first personal computer with a floppy drive.
    * **1975** - Bill Gates and Paul Allen create first BASIC implementation on a microcomputer; the MITS Altair. This lead to the creation of Microsoft.
    * **1975** - MOS Technology released [6502](https://en.wikipedia.org/wiki/MOS_Technology_6502) microprocessor; used in the Apple I and II, Atari, Commodore Pet, and VIC-20.
    * **1975-11** - [Zilog](https://en.wikipedia.org/wiki/Zilog) founded by ex-Intel employees.
    * **1976-04-01** - Steve Wozniak and Steve Jobs founded Apple Computers.
    * **1976** - IBM makes first laser printer.
    * **1976** - Zilog releases [Z80](https://en.wikipedia.org/wiki/Zilog_Z80) microprocessor, compatible with the Intel 8080, and popularized by the [TRS-80](https://en.wikipedia.org/wiki/TRS-80_Model_II#Model_16).
    * **1976** - Seymour Cray invents the Cray-1 supercomputer - the first super computer.
    * **1976** - Guy Steele invents EMACS.
    * **1978-06-08** - Intel 16-bit 8086 microprocessor; the first x86 chip.
    * **1978** - Japan releases the Space Invaders game.
    * **1979** - ADA programming language invented for the DoD.
    * **1979** - Intel 8088 microprocessor invented (a cheaper version of the 8086) for the IBM PC.
    * **1979** - Japan invents the compact disc.
    * **1979** - Motorola releases the 32-bit [68000](https://en.wikipedia.org/wiki/Motorola_68000).
    * **1979** - [VisiCalc](https://en.wikipedia.org/wiki/VisiCalc) released as the first spreadsheet, thanks to Dan Bricklin.
    * **1979** - WordStar released.
    * **1980** - Japan releases PacMan
    * **1980** - Microsoft creates DOS.
    * **1981** - IBM announces the IBM-PC.
    * **1981** - IBM announces the IBM-PC with MS-DOS 1.0
    * **1981** - TCP/IP established.
    * **1981** - Richard Feynman proposed quantum computers.
    * **1982-02** - 80286 released.
    * **1982-05** - IBM launch the double-sided 320 KB floppy disk drive.
    * **1982-07** - Timex/Sinclair announces the [Sinclair 1000](https://en.wikipedia.org/wiki/Timex_Sinclair_1000) personal computer - the first under $100.
    * **1982-08** - [Commodore 64](https://en.wikipedia.org/wiki/Commodore_64) released - the highest-selling single computer model of all time.
    * **1982-12** - IBM bought 12% of Intel.
    * **1983-01** - Apple introduces the [Lisa](https://en.wikipedia.org/wiki/Apple_Lisa) computer.
    * **1983-01** - [Lotus 1-2-3](https://en.wikipedia.org/wiki/Lotus_1-2-3) - the "killer" application for the IBM-PC
    * **1983-09** - Richard Stallman announces the GNU Project, to create a free software - eventually led to Linux.
    * **1983-10** - Microsoft Word.
    * **1983-11** - DNS introduced to the Internet
    * **1983** - Philippe Kahn founded [Borland](https://en.wikipedia.org/wiki/Borland) company - creator of Turbo Pascal by Anders Hejlsberg, who also later created C# programming language.
    * **1984-05** - HP LaserJet released. 20 million sold.
    * **1984** - Borland releases [Turbo Pascal](https://en.wikipedia.org/wiki/Turbo_Pascal) - the first programming language sold with an integrated development environment (IDE)
      containing the compiler, editor, linker, and debugger. Sold for $49.99 and sold more than 400K copies. It became one of the most
      popular programming languages of the time.
    * **1985-03** - MS-DOS 3.1
    * **1985-03** - Symbolics registered the symbolics.com domain, the first .com domain in the world.
    * **1985-06** - Commodore 128 was Commodore's last 8-bit computer. $299.95
    * **1985-07** - Commodore released the Amiga
    * **1985-10** - Intel 80386 DX released - 33 MHz and can address up to 4 GB of RAM.
    * **1985-11** - Microsoft Windows
    * **1985** - Philips (Japan) invents the CD-ROM
    * **1985** - Enhanced Graphics Adapter (EGA) released.
    * **1986-06** - Eric Thomas invents LISTSERV, the first automated mailing list management application
    * **1986-10** - [Compaq DeskPro](https://en.wikipedia.org/wiki/Compaq_Deskpro_386) released.
    * **1987-04** - IBM introduces the PS/2 Computer Systems.
    * **1987-04** - IBM introduces the PS/2 Computer Systems.
    * **1987-12** - Microsoft Windows 2
    * **1987** - [HyperCard](https://en.wikipedia.org/wiki/HyperCard) released.
    * **1987** - IBM VGA
    * **1988** - WORM (Write Once Read Many times) – disks marketed for first time by IBM.
    * **1988** - Adobe Photoshop
    * **1989-04** - Intel 80486
    * **1989** - Tim Berners-Lee invents the World Wide Web
    * **1990-05** - Microsoft Windows 3.0
    * **1990-11** - Microsoft Office
    * **1991** - Phil Zimmermann releases public key encryption program PGP and source code.
    * **1991** - Linus Torvalds (Finland) releases Linux Kernel.
    * **1992** - MIPS releases first 64-bit microprocessors, the MIPS R4000.
    * **1992** - IBM PowerPC
    * **1992** - Wolfenstein 3D Game
    * **1993** - Mosaic graphical web browser launched
    * **1993** - MP3






















  links:
  - url: https://en.wikipedia.org/wiki/History_of_computing
    text: Wikipedia - History of Computers
  - url: https://blog.archive.org/2023/09/20/a-quarter-in-a-quarter-million-out-10-years-of-emulation-at-internet-archive/
    text: "A Quarter In, A Quarter-Million Out: 10 Years of Emulation at Internet Archive"
    short: |
      With the goal to keep a history of old software (especially those that read documents) the solution is to emulate the
      machines and operating systems that these old software run on. Machines back then ran in the MHz. Today's computers are
      1000x faster.
  - url: http://dunfield.classiccmp.org/
    short: List of home computers since 1976
    text: Dave's Old Computers
  - url: https://www.usg.edu/galileo/skills/unit07/internet07_02.phtml
    text: A Brief History of the Internet

- id: www
  title: World Wide Web
  short: History of the World Wide Web
  parents: history
  description: |
    ## Timeline
    Some important relevant dates in the history of the WWW..

    * **1983-01-01** - The official birthday of the Internet.
      Prior to this, the various computer networks did not have a standard way to communicate with each other.
      ARPANET changed its standard to TCP/IP
    * **1985-10** Intel introduced the [80386](https://www.xtof.info/intel80386.html) with Memory Management Unit (MMU) that allows
      virtual memory and disk swapping. It was Intel's first 32-bit CPU.
    * **1989-03-12** - Tim Berners-Lee proposes the World Wide Web
    * **1990-12** - First web browser and web site. WWW goes live.
    * **1992-08** Linus Torvalds release the first Linux. It ran on the 80386
    * **1993-01** - First release of Mosaic Browser.
    * **1993-07** - Microsoft Windows NT
    * **1994-12** - 10,000 web servers around the world.

  links:
  - url: https://en.wikipedia.org/wiki/History_of_the_World_Wide_Web
    text: Wikipedia - History of the World Wide Web
  - url: https://blog.archive.org/2023/09/20/a-quarter-in-a-quarter-million-out-10-years-of-emulation-at-internet-archive/
    text: "A Quarter In, A Quarter-Million Out: 10 Years of Emulation at Internet Archive"
    short: |
      With the goal to keep a history of old software (especially those that read documents) the solution is to emulate the
      machines and operating systems that these old software run on. Machines back then ran in the MHz. Today's computers are
      1000x faster.
  - url: https://www.visualcapitalist.com/30-year-timeline-world-wide-web/
    text: "Timeline: The 30-Year History of the World Wide Web"




#================================================================================
#  EXAMPLES
#================================================================================

- id: mysubject
  title: My Subject
  short: Just an example of a subject
